对象
- python使用对象模型来存储数据
- 构造任何类型的值都是一个对象
- 对象三个特性
	- 身份：可以使用内建函数id()来得到，可以被认为是该对象的内存地址
	- 类型：可以用内建函数type()来查看，决定该对象可以保存什么类型的值、进行什么样的操作
		- type()返回的是对象而不是简单的字符串
	- 值(属性)：对象表示的数据项
	- 三个特性在对象创建的时候就被赋值，除了值之外，其他两个特性都是只读的

* 对象有一系列固有行为和特性（比如支持哪些运算，具有哪些方法），这些需要事先定义好
* 从这个角度看，类型正是保存这些信息的最佳位置。因为描述一种类型所需要的信息不可能用一个字符串来搞定，所以类型不能是一个简单的>字符串，这些信息不能也不应该和数据保存在一起，所以我们将类型定义成对象
* 类就是类型，实例是对应类型的对象

标准类型（基本数据类型）
- 包括
	- 数字
	- Integer整型
	- Boolean布尔型
	- Long integer长整型
	- Floating point real number浮点型
	- Complex number复数型
	- String字符串
	- List列表
	- Tuple元组
	- Dictionary字典

其他内建类型
- 包括
	- 类型
	- Null对象（None）
	- 文件
	- 集合/固定集合
	- 函数/方法
	- 模块
	- 类

   * 类型对象和type类型对象
	-  type （42）--> <type ‘int’>
		- <type‘int’>实际上是一个类型对象
	- type（type（42））--> <type ‘type’>
		- 所有类型对象的类型都是type，是所有Python类型的根和所有Python标准类的默认元类（metadass)
		- 类就是类型，实例是对应类型的对象

    * None——Python的 Null对象
	- None没有什么有用的属性，它的布尔值总是False
	- 所有标准对象均可用于布尔测试，同类型的对象之间可以比较大小
	- 而且每个对象天生具有布尔True或False值

标准类型操作符
* 比较
- 所有的内建类型均支持比较运算,比较运算返回布尔值True或False
- 对象值的比较
	- 用来判断同类型对象是否相等
		- 比较的是对象的数值而不是对象本身,
		- 实际进行的比较运算因类型而异
	- 实操：2 == 2  --> True

- 对象身份比较
	- 对象就像一个装着内容的盒子，当一个对象被赋值到一个变量，就像在这个盒子上贴了一个标签，表示创建了一个引用
	- 当这个对象有了一个新的引用，就会在盒子上新贴一张标签。当一个引用被销毁时，这个标签就会被撕掉。当所有的标签都被撕掉时，这个盒子就会被回收
	- 实操：a is b => id(a) == id(b)

* 布尔
- 布尔逻辑操作符and、or和not

标准类型内建函数
	- type
		- type（object）返回类型对象
			- type的输出不像一个典型的Python数据类型，比如一个整型
			- 这种语法是为了告诉你它是一个对象，每个对象都可以实现一个可打印的字符串表示
			- <object_something_or_another>,以这种形式显示的对象通常会提供对象类别、对象id或位置，或者其他合适的信息
	- cmp
	- str和repr和``
		- str()函数得到的字符串可读性好
		- 而repr()函数得到的字符串通常可以用来重新获得该对象

标准类型的分类
- Python提供了高级的数据结构，我们需要将那些原始的类型和功能强大的扩展类型区分开来
- 有助于搞清楚某种类型应该具有什么行为
- 某些分类中的所有类型具有一些相同的特性

- 有3种不同的模型可以帮助我们对基本类型进行分类
	- 存储模型
		- 按照这种类型的对象能保存多少个对象进行区分
		- 分为原子类型和容器类型
	- 更新模型
		- 按照对象创建成功之后它的值是否可以进行更新进行区分
		- 分为可变类型和不可变类型
	- 访问模型
		- 按照访问我们存储的数据的方式对数据类型进行区分
		- 分为直接存取、顺序和映射
- 总结
	- 数字是原子、不可变、直接访问
	- 字符串是原子、不可变、顺序访问
	- 列表是容器、可变、顺序访问
	- 元组是容器、不可变、顺序访问
	- 字典是容器、可变、映射访问
